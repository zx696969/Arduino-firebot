#include <SD.h>
#include <TMRpcm.h>
#include <Servo.h>

// Pin Definitions
const int flameSensorPin = A0; // Flame sensor pin
const int pumpPin = 6;         // Water pump control pin
const int servoPin = 5;        // Servo motor control pin
const int motorA1 = 7;         // Motor A control pins
const int motorA2 = 8;
const int motorB1 = 9;         // Motor B control pins
const int motorB2 = 10;
const int SD_ChipSelectPin = 4; // SD card module CS pin

// Libraries and Variables
TMRpcm audio;
Servo servo;
String command = "";
bool fireDetected = false;
bool handshakeComplete = false; // Tracks handshake status
int flameThreshold = 300; // Adjust based on flame sensor readings

void setup() {
    // Initialize serial communication
    Serial.begin(9600);

    // Initialize SD card and audio
    audio.speakerPin = 11;
    if (!SD.begin(SD_ChipSelectPin)) {
        Serial.println("SD card initialization failed!");
        return;
    }

    // Initialize pins
    pinMode(flameSensorPin, INPUT);
    pinMode(pumpPin, OUTPUT);
    pinMode(motorA1, OUTPUT);
    pinMode(motorA2, OUTPUT);
    pinMode(motorB1, OUTPUT);
    pinMode(motorB2, OUTPUT);

    servo.attach(servoPin);
    servo.write(90); // Default servo position
    Serial.println("Waiting for handshake...");
}

void loop() {
    // Perform handshake before accepting commands
    if (!handshakeComplete) {
        performHandshake();
        return;
    }

    // Check for fire detection
    int flameValue = analogRead(flameSensorPin);
    if (flameValue < flameThreshold) {
        fireDetected = true;
        Serial.println("Fire detected!");
        audio.play("fire.wav"); // Play "Fire detected" audio
        extinguishFire();
    } else {
        fireDetected = false;
        stopMotors();
    }

    // Check for Bluetooth commands
    if (Serial.available()) {
        command = Serial.readStringUntil('\n');
        command.trim(); // Remove leading/trailing whitespace
        processCommand(command);
    }
}

// Handshake Function
void performHandshake() {
    if (Serial.available()) {
        String handshakeMessage = Serial.readStringUntil('\n');
        handshakeMessage.trim();
        if (handshakeMessage == "HELLO ROBOT") {
            Serial.println("HELLO USER");
            audio.play("hello.wav"); // Play greeting audio
            Serial.println("Handshake successful. Ready to accept commands.");
            handshakeComplete = true;
        } else {
            Serial.println("Invalid handshake. Please send 'HELLO ROBOT'.");
        }
    }
}

// Function to extinguish fire
void extinguishFire() {
    moveForward();           // Move towards the fire
    delay(2000);             // Adjust movement duration as needed
    stopMotors();
    audio.play("extinguish.wav"); // Play "Extinguishing fire" audio
    servo.write(45);         // Adjust servo to aim at fire
    digitalWrite(pumpPin, HIGH); // Activate water pump
    delay(3000);             // Spray water for 3 seconds
    digitalWrite(pumpPin, LOW);  // Stop water pump
    servo.write(90);         // Reset servo position
}

// Function to process Bluetooth commands
void processCommand(String cmd) {
    if (cmd == "WHAT IS YOUR NAME") {
        audio.play("name.wav"); // "My name is FireBot."
        Serial.println("Response: My name is FireBot.");
    } else if (cmd == "WHAT IS YOUR JOB") {
        audio.play("job.wav"); // "I am a firefighter and talking robot."
        Serial.println("Response: I am a firefighter and talking robot.");
    } else if (cmd == "WHAT IS YOUR STATUS") {
        if (fireDetected) {
            audio.play("fire.wav"); // "Fire detected."
            Serial.println("Response: Fire detected.");
        } else {
            audio.play("safe.wav"); // "All is safe."
            Serial.println("Response: All is safe.");
        }
    } else if (cmd == "WHO IS YOUR CREATOR") {
        audio.play("creator.wav"); // "I was created by a robotics enthusiast."
        Serial.println("Response: I was created by a robotics enthusiast.");
    } else if (cmd == "WHAT IS YOUR PURPOSE") {
        audio.play("purpose.wav"); // "My purpose is to help in fire emergencies."
        Serial.println("Response: My purpose is to help in fire emergencies.");
    } else if (cmd == "HELLO") {
        audio.play("hello.wav"); // "Hello! How can I help you?"
        Serial.println("Response: Hello! How can I help you?");
    } else {
        audio.play("error.wav"); // Unknown command
        Serial.println("Response: Unknown command.");
    }
}

// Motor control functions
void moveForward() {
    digitalWrite(motorA1, HIGH);
    digitalWrite(motorA2, LOW);
    digitalWrite(motorB1, HIGH);
    digitalWrite(motorB2, LOW);
}

void stopMotors() {
    digitalWrite(motorA1, LOW);
    digitalWrite(motorA2, LOW);
    digitalWrite(motorB1, LOW);
    digitalWrite(motorB2, LOW);
}
